{"version":3,"sources":["components/SectionView/SectionView.module.scss","components/MainView/MainView.module.scss","components/ItemView/ItemView.module.scss","constants.js","components/Header/Header.js","components/MainView/MainView.js","components/SectionView/SectionView.js","components/InfoItem/InfoItem.js","components/ItemView/ItemView.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","UNSPLASH_ACCESS_KEY","fillPath","strUrl","params","Object","entries","reduce","str","id","value","replace","Header","className","MainView","state","data","fetch","then","response","json","console","log","setState","this","getData","list","map","item","key","to","styles","section_item","div_item","title","wrapper","React","Component","SectionView","apiData","sortPopular","tab","sort","a","b","likes","sortLatest","x","Date","parse","created_at","props","match","foto_list","src","urls","small","alt","info","onClick","btn","popular","latest","container","withRouter","InfoItem","description","alt_description","author","date","views","downloads","location","slice","ItemView","url","regular","user","name","photo","item_foto","item_info","App","basename","process","path","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.057e8de7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SectionView_container__2TGmv\",\"btn\":\"SectionView_btn__1f78H\",\"popular\":\"SectionView_popular__fQd_y\",\"latest\":\"SectionView_latest__1AKwg\",\"item\":\"SectionView_item__3875G\",\"info\":\"SectionView_info__101Uw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MainView_wrapper__1BQUG\",\"section_item\":\"MainView_section_item__KRSfY\",\"anim\":\"MainView_anim__1-ja5\",\"div_item\":\"MainView_div_item__2bEjj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item_foto\":\"ItemView_item_foto__2lM9C\",\"item_info\":\"ItemView_item_info__35Cp1\"};","export const UNSPLASH_BASE_URL = \"https://api.unsplash.com\";\r\nexport const UNSPLASH_ACCESS_KEY = \"3f664ef5e4273eb908008a62f5bb36a44010ddbd641644700adac1dcd8a48e49\";\r\nexport const UNSPLASH_LIST_URL = 'https://api.unsplash.com/collections/:id/photos/?page=1&per_page=30&';\r\nexport const UNSPLASH_PHOTO_URL = 'https://api.unsplash.com/photos/:id/?'\r\n\r\nexport const fillPath = (strUrl = '', params = {}) => {\r\n    return Object.entries(params).reduce((str, [id, value]) => {\r\n        return str.replace(`:${id}`, value);\r\n    }, strUrl);\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className='header'>\r\n            <h1>Photos from Unsplash</h1>\r\n            <h2 >Click on the section's names below and discover the latest photography, delivered by Unsplash - one of the most popular source of freely usable images</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport { UNSPLASH_BASE_URL, UNSPLASH_ACCESS_KEY } from '../../constants';\r\nimport Header from '../Header/Header';\r\nimport styles from './MainView.module.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass MainView extends React.Component {\r\n    state = {\r\n        data: [],\r\n    }\r\n    getData() {\r\n        fetch(`${UNSPLASH_BASE_URL}/collections?page=1&per_page=30&client_id=${UNSPLASH_ACCESS_KEY}`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({\r\n                    data: data\r\n                })\r\n            })\r\n    }\r\n    componentDidMount() {\r\n        this.getData()\r\n    }\r\n    render() {\r\n        const list = this.state.data.map(item => (\r\n            <Link key={item.id} to={`/SectionView/${item.id}`} className={styles.section_item}>\r\n                <div className={styles.div_item}>\r\n                    <h2 title={item.title}>{item.title}</h2>\r\n                </div>\r\n            </Link >\r\n\r\n        ))\r\n        return (\r\n            <>\r\n                <Header />\r\n                <div className={styles.wrapper}>\r\n                    {list}\r\n                </div>\r\n\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainView;\r\n","import React from 'react';\r\nimport { UNSPLASH_LIST_URL, UNSPLASH_ACCESS_KEY, fillPath } from '../../constants';\r\nimport { withRouter, Link } from 'react-router-dom';\r\nimport styles from './SectionView.module.scss';\r\n\r\n\r\nclass SectionView extends React.Component {\r\n    state = {\r\n        apiData: [],\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(fillPath(`${UNSPLASH_LIST_URL}client_id=${UNSPLASH_ACCESS_KEY}`, this.props.match.params))\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({\r\n                    apiData: data\r\n                })\r\n            })\r\n    }\r\n\r\n    sortPopular = () => {\r\n        const tab = this.state.apiData;\r\n        tab.sort((a, b) => {\r\n            return b.likes - a.likes\r\n        })\r\n        this.setState({\r\n            apiData: tab,\r\n        })\r\n    }\r\n\r\n    sortLatest = () => {\r\n        const tab = this.state.apiData;\r\n        tab.sort((a, b) => {\r\n            let x = Date.parse(a.created_at)\r\n            let y = Date.parse(b.created_at)\r\n            return y - x\r\n        })\r\n        this.setState({\r\n            apiData: tab\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const foto_list = this.state.apiData.map(item => (\r\n            <Link key={item.id} to={`/ItemView/${item.id}`}>\r\n                <div className={styles.item}>\r\n                    <img src={item.urls.small} key={item.id} alt=\"foto\" />\r\n                    <div className={styles.info}>\r\n                        <p>{item.likes} likes</p>\r\n                    </div>\r\n                </div>\r\n\r\n            </Link>\r\n        ))\r\n\r\n        return (\r\n            <>\r\n\r\n                <button onClick={this.sortPopular} className={`${styles.btn} ${styles.popular}`} >sort by the most popular</button>\r\n                <button onClick={this.sortLatest} className={`${styles.btn} ${styles.latest}`}>sort by the latest</button>\r\n                <div className={styles.container}>\r\n                    {foto_list}\r\n                </div>\r\n\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default withRouter(SectionView);","import React from 'react';\r\n\r\n\r\nconst InfoItem = ({ description, alt_description, author, date, likes, views, downloads, location }) => {\r\n    return (\r\n        <>\r\n            <h3>{description} </h3>\r\n            {description ? null : <h3>{alt_description}</h3>}\r\n            <p>Made by {author}, {date.slice(0, 10)}</p>\r\n            {location ? <p>{location}</p> : null}\r\n            <p>{likes} likes </p>\r\n            <p>{views} views</p>\r\n            <p>{downloads} downloads</p>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InfoItem;","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { UNSPLASH_PHOTO_URL, UNSPLASH_ACCESS_KEY, fillPath } from '../../constants';\r\nimport InfoItem from '../InfoItem/InfoItem';\r\nimport styles from './ItemView.module.scss';\r\n\r\n\r\nclass ItemView extends React.Component {\r\n    state = {\r\n        url: '',\r\n        date: '',\r\n        description: '',\r\n        alt_description: '',\r\n        likes: '',\r\n        views: '',\r\n        author: '',\r\n        downloads: '',\r\n        location: '',\r\n\r\n    }\r\n    componentDidMount() {\r\n        fetch(fillPath(`${UNSPLASH_PHOTO_URL}client_id=${UNSPLASH_ACCESS_KEY}`, this.props.match.params))\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                this.setState({\r\n                    url: data.urls.regular,\r\n                    date: data.created_at,\r\n                    description: data.description,\r\n                    alt_description: data.alt_description,\r\n                    likes: data.likes,\r\n                    views: data.views,\r\n                    author: data.user.name,\r\n                    downloads: data.downloads,\r\n                    location: data.location.title,\r\n                })\r\n            })\r\n    }\r\n    render() {\r\n        console.log(this.props.match.params)\r\n        const { url, date, description, alt_description, likes, views, author, downloads, location } = this.state;\r\n        const photo = <img src={url} alt=\"foto\" />;\r\n\r\n        return (\r\n            <>\r\n                <div className={styles.item_foto}>\r\n                    {photo}\r\n                </div>\r\n                <div className={styles.item_info}>\r\n                    <InfoItem date={date} description={description} alt_description={alt_description} likes={likes} views={views} author={author} downloads={downloads} location={location} />\r\n                </div>\r\n\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ItemView);","import React from 'react';\r\nimport MainView from './MainView/MainView';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport SectionView from './SectionView/SectionView';\r\nimport ItemView from './ItemView/ItemView';\r\n\r\n// '/collections?page=1&perPage=10&orderBy=latest'\r\n\r\nclass App extends React.Component {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n\r\n        <Switch>\r\n\r\n          <Route path=\"/SectionView/:id\"> <SectionView />  </Route>\r\n          <Route path=\"/ItemView/:id\"> <ItemView />  </Route>\r\n          <Route path=\"/\" > <MainView />  </Route>\r\n\r\n\r\n        </Switch>\r\n\r\n      </BrowserRouter>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}